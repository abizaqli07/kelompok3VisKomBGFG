# -*- coding: utf-8 -*-
"""segmentation_MOG2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1em2mJphqyics4mYfyv3SSCplTA7aYnFU
"""

import cv2 as cv
import numpy as np
from google.colab.patches import cv2_imshow

# Function to process video
def process_video(video_path):
    capture = cv.VideoCapture(video_path)

    if not capture.isOpened():
        print("Error: Could not open video.")
        return

    # Create background subtractor
    subsMog2 = cv.createBackgroundSubtractorMOG2()

    i = 0
    while capture.isOpened():
        re, frame = capture.read()
        if not re:
            break

        # Resize frame
        scale = 20
        width = int(frame.shape[1] * scale / 100)
        height = int(frame.shape[0] * scale / 100)
        dim = (width, height)
        image = cv.resize(frame, dim, cv.INTER_AREA)

        # Apply Gaussian filter
        gaussian = np.array([
            [1.0, 4.0, 7.0, 4.0, 1.0],
            [4.0, 16.0, 26.0, 16.0, 4.0],
            [7.0, 26.0, 41.0, 26.0, 7.0],
            [4.0, 16.0, 26.0, 16.0, 4.0],
            [1.0, 4.0, 7.0, 4.0, 1.0]
        ]) / 273
        image = cv.filter2D(image, -1, gaussian)

        # Apply MOG2 background subtraction
        blobMog = subsMog2.apply(image)

        # Apply morphological operations to clean up the mask
        kernel = cv.getStructuringElement(cv.MORPH_RECT, (7, 7))
        morphImage = blobMog
        for _ in range(1, 3):
            morphImage = cv.morphologyEx(morphImage, cv.MORPH_CLOSE, kernel)
        morphImage = cv.morphologyEx(morphImage, cv.MORPH_DILATE, kernel)

        # Display the results
        print("Original Image")
        cv2_imshow(image)  # Display original image
        print("MOG2 Background Subtraction")
        cv2_imshow(blobMog)  # Display MOG2 background subtraction
        print("Morphological Transformations")
        cv2_imshow(morphImage)  # Display morphological transformations

        # Wait for 30 ms before moving on to the next frame
        if cv.waitKey(30) & 0xFF == ord('q'):
            break

    capture.release()
    cv.destroyAllWindows()

# Process the uploaded video file
video_path = 'mouse.mp4'  # Replace with your actual video file path
process_video(video_path)